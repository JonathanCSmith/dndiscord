from tkinter import LabelFrame, Label, W, NSEW, Button, Frame

from modules.business_simulator.model.data_pack import Improvement, BusinessStateModifier, ModifiesAttribute, ServiceOffered, Customer, Contract, Employee


def build_customer_view(parent, customer):
    obj_frame = build_and_add_business_state_modifier(parent, customer)

    # Properties frame - may not be best in a single frame?
    properties_frame = LabelFrame(obj_frame, text="Customer Properties")

    tier_label = Label(properties_frame, text="Customer Priority:")
    tier_label.grid(row=0, column=0, sticky=NSEW)
    tier_label.config(anchor="w")
    tier_value = Label(properties_frame, text=str(customer.customer_tier))
    tier_value.grid(row=0, column=1, sticky=NSEW)
    tier_value.config(anchor="w")

    tags_label = Label(properties_frame, text="Popularity Tags <Note some are autogenerated>:")
    tags_label.grid(row=1, column=0, columnspan=2, sticky=NSEW)
    tags_label.config(anchor="w")

    row_count = 2
    for item in customer.get_popularity_modifiers():
        item_label = Label(properties_frame, text=item)
        item_label.grid(row=row_count, column=1, sticky=NSEW)
        item_label.config(anchor="w")
        row_count += 1

    tags_label = Label(properties_frame, text="Occupancy Tags <Note some are autogenerated>:")
    tags_label.grid(row=row_count, column=0, columnspan=2, sticky=NSEW)
    tags_label.config(anchor="w")
    row_count += 1

    for item in customer.get_maximum_occupancy_modifiers():
        item_label = Label(properties_frame, text=item)
        item_label.grid(row=row_count, column=1, sticky=NSEW)
        item_label.config(anchor="w")
        row_count += 1

    properties_frame.pack(expand=1, fill="x")

    # Services consumer frame
    consumed_frame = LabelFrame(obj_frame, text="Services Consumed")

    row_count = 0
    for service_identifier, amount in customer.get_consumed_services().items():
        item_key = Label(consumed_frame, text=service_identifier)
        item_key.grid(row=row_count, column=1, sticky=NSEW)
        item_key.config(anchor="w")
        item_value = Label(consumed_frame, text=str(amount))
        item_value.grid(row=row_count, column=2, sticky=NSEW)
        item_value.config(anchor="w")
        row_count += 1

    consumed_frame.pack(expand=1, fill="x")

    obj_frame.pack(expand=1, fill="x")
    return obj_frame


def build_service_view(parent, service):
    obj_frame = build_and_add_business_state_modifier(parent, service)

    # Costs frame
    costs_frame = LabelFrame(obj_frame, text="Costs")
    cost_label = Label(costs_frame, text="Base Cost:")
    cost_label.grid(row=0, column=0, sticky=NSEW)
    cost_label.config(anchor="w")
    cost_value = Label(costs_frame, text=str(service.cost_price))
    cost_value.grid(row=0, column=1, sticky=NSEW)
    cost_value.config(anchor="w")
    tags_label = Label(costs_frame, text="Tags <Note some are autogenerated>:")
    tags_label.grid(row=1, column=0, columnspan=2, sticky=NSEW)
    tags_label.config(anchor="w")
    row_count = 2
    for item in service.get_cost_value_modifiers():
        item_label = Label(costs_frame, text=item)
        item_label.grid(row=row_count, column=1, sticky=NSEW)
        item_label.config(anchor="w")
        row_count += 1
    costs_frame.pack(expand=1, fill="x")

    # Sales frame
    sales_frame = LabelFrame(obj_frame, text="Sales")
    sales_label = Label(sales_frame, text="Base Sale:")
    sales_label.grid(row=0, column=0, sticky=NSEW)
    sales_label.config(anchor="w")
    sales_value = Label(sales_frame, text=str(service.cost_price))
    sales_value.grid(row=0, column=1, sticky=NSEW)
    sales_value.config(anchor="w")
    tags2_label = Label(sales_frame, text="Tags <Note some are autogenerated>:")
    tags2_label.grid(row=1, column=0, columnspan=2, sticky=NSEW)
    tags2_label.config(anchor="w")
    row_count = 2
    for item in service.get_unit_sales_modifiers():
        item_label = Label(sales_frame, text=item)
        item_label.grid(row=row_count, column=1, sticky=NSEW)
        item_label.config(anchor="w")
        row_count += 1
    sales_frame.pack(expand=1, fill="x")

    # TODO: Volume modifiers

    # TODO: Global modifiers

    obj_frame.pack(expand=1, fill="x")
    return obj_frame


def build_improvement_view(parent, improvement, interaction=False, purchase_handler=None):
    obj_frame = build_and_add_business_state_modifier(parent, improvement)

    improvement_frame = LabelFrame(obj_frame, text="Improvement Properties")
    cost_label = Label(improvement_frame, text="Cost:")
    cost_label.grid(row=0, column=0, sticky=NSEW)
    cost_label.config(anchor="w")
    cost_value = Label(improvement_frame, text=str(improvement.cost))
    cost_value.grid(row=0, column=1, sticky=NSEW)
    cost_value.config(anchor="w")
    duration_label = Label(improvement_frame, text="Build Time:")
    duration_label.grid(row=1, column=0, sticky=NSEW)
    duration_label.config(anchor="w")
    duration_value = Label(improvement_frame, text=str(improvement.duration))
    duration_value.grid(row=1, column=1, sticky=NSEW)
    duration_value.config(anchor="w")
    improvement_frame.pack(expand=1, fill="x")

    # If we want a purchase button
    if interaction:
        if purchase_handler is not None:
            purchase = Button(obj_frame, text="Purchase", command=lambda: purchase_handler.purchase_improvement(improvement))
            purchase.pack(expand=0)

    obj_frame.pack(expand=1, fill="x")
    return obj_frame


def build_contract_view(parent, contract, interaction=False, purchase_handler=None):
    obj_frame = build_and_add_business_state_modifier(parent, contract)

    properties_frame = LabelFrame(obj_frame, text="Contract Properties")
    cost_label = Label(properties_frame, text="Cost:")
    cost_label.grid(row=0, column=0, sticky=NSEW)
    cost_label.config(anchor="w")
    cost_value = Label(properties_frame, text=str(contract.cost))
    cost_value.grid(row=0, column=1, sticky=NSEW)
    cost_value.config(anchor="w")
    duration_label = Label(properties_frame, text="Duration:")
    duration_label.grid(row=1, column=0, sticky=NSEW)
    duration_label.config(anchor="w")
    duration_value = Label(properties_frame, text=str(contract.duration))
    duration_value.grid(row=1, column=1, sticky=NSEW)
    duration_value.config(anchor="w")
    properties_frame.pack(expand=1, fill="x")

    # If we want a purchase button
    if interaction:
        if purchase_handler is not None:
            purchase = Button(obj_frame, text="Purchase", command=lambda: purchase_handler.purchase_contract(contract))
            purchase.pack(expand=0)

    obj_frame.pack(expand=1, fill="x")
    return obj_frame


def build_employee_view(parent, employee, interaction=False, purchase_handler=None):
    obj_frame = build_and_add_business_state_modifier(parent, employee)

    properties_frame = LabelFrame(obj_frame, text="Employee Properties")
    cost_label = Label(properties_frame, text="Cost per day:")
    cost_label.grid(row=0, column=0, sticky=NSEW)
    cost_label.config(anchor="w")
    cost_value = Label(properties_frame, text=str(employee.cost_per_day))
    cost_value.grid(row=0, column=1, sticky=NSEW)
    cost_value.config(anchor="w")
    properties_frame.pack(expand=1, fill="x")

    # If we want a purchase button
    if interaction:
        if purchase_handler is not None:
            purchase = Button(obj_frame, text="Purchase", command=lambda: purchase_handler.purchase_employee(employee))
            purchase.pack(expand=0)

    obj_frame.pack(expand=1, fill="x")
    return obj_frame


def build_and_add_business_state_modifier(parent, obj: BusinessStateModifier):
    obj_frame = LabelFrame(parent, text=obj.get_key())

    detail_frame = LabelFrame(obj_frame, text="Info")
    translated_key_label = Label(detail_frame, text=obj.get_key())
    translated_key_label.pack(expand=1, fill="x")
    translated_key_label.config(anchor="w")
    detail_frame.pack(expand=1, fill="x")

    # Prerequisites
    prerequisites_frame = LabelFrame(obj_frame, text="Prerequisites")
    prerequisites_frame.grid_columnconfigure(0, weight=1)
    prerequisites_frame.grid_columnconfigure(1, weight=5)
    prerequisites_frame.grid_columnconfigure(2, weight=5)
    prerequisites_frame.grid_columnconfigure(3, weight=5)
    row_count = 0
    for key, condition in obj.get_prerequisites().items():
        condition_key = Label(prerequisites_frame, text=condition.get_key())
        condition_type = Label(prerequisites_frame, text=condition.get_type())  # TODO
        condition_type.grid(row=row_count, column=1, sticky=NSEW)
        condition_type.config(anchor="w")
        condition_key.grid(row=row_count, column=2, sticky=NSEW)
        condition_key.config(anchor="w")
        condition_value = Label(prerequisites_frame, text=condition.get_value())  # TODO
        condition_value.grid(row=row_count, column=3, sticky=NSEW)
        condition_value.config(anchor="w")
        row_count += 1
    prerequisites_frame.pack(expand=1, fill="x")

    # Provided
    provided_frame = LabelFrame(obj_frame, text="Attributes Provided")
    provided_frame.grid_columnconfigure(0, weight=1)
    provided_frame.grid_columnconfigure(1, weight=5)
    provided_frame.grid_columnconfigure(2, weight=5)
    provided_frame.grid_columnconfigure(3, weight=5)
    row_count = 0
    for key, attribute in obj.get_state_modifiers().items():
        attribute_key = Label(provided_frame, text=attribute.get_key())
        attribute_key.grid(row=row_count, column=1, sticky=NSEW)
        attribute_key.config(anchor="w")
        cc = 2
        if isinstance(attribute, ModifiesAttribute):
            attribute_type = Label(provided_frame, text=attribute.get_type())  # TODO
            attribute_type.grid(row=row_count, column=cc, sticky=NSEW)
            attribute_type.config(anchor="w")
            cc+=1
        attribute_value = Label(provided_frame, text=attribute.get_value())  # TODO
        attribute_value.grid(row=row_count, column=cc, sticky=NSEW)
        attribute_value.config(anchor="w")
        row_count += 1
    provided_frame.pack(expand=1, fill="x")

    obj_frame.pack(expand=1, fill="x")
    return obj_frame


def build_active_view(parent, obj):
    contract_label = Label(parent, text=str(obj))
    contract_label.pack(expand=0)
    contract_label.config(anchor="w")


def build_sales_view(parent, obj):
    return


def build_customers_view(parent, obj):
    return


def build_and_add_business_state_modifier_view(parent, obj):
    if isinstance(obj, Improvement):
        return build_improvement_view(parent, obj)
    elif isinstance(obj, ServiceOffered):
        return build_service_view(parent, obj)
    elif isinstance(obj, Customer):
        return build_customer_view(parent, obj)
    elif isinstance(obj, Contract):
        return build_contract_view(parent, obj)
    elif isinstance(obj, Employee):
        return build_employee_view(parent, obj)
    elif isinstance(obj, BusinessStateModifier):
        return build_and_add_business_state_modifier(parent, obj)


def build_property_view_gui(parent, property_key, property_value):
    property_frame = LabelFrame(parent)

    untranslated_key_label = Label(property_frame, text=property_key)
    untranslated_key_label.grid(row=0, column=0, sticky=NSEW)
    untranslated_key_label.config(anchor="w")
    translated_key_label = Label(property_frame, text=property_key)  # TODO
    translated_key_label.grid(row=0, column=1, sticky=NSEW)
    translated_key_label.config(anchor="w")
    untranslated_value_label = Label(property_frame, text=property_value)
    untranslated_value_label.grid(row=1, column=0, sticky=NSEW)
    untranslated_value_label.config(anchor="w")
    translated_value_label = Label(property_frame, text=property_value)  # TODO
    translated_value_label.grid(row=1, column=1, sticky=NSEW)
    translated_value_label.config(anchor="w")
    property_frame.pack(expand=0, fill="x")


def build_data_pack_overview(parent, data_pack):
    name_label = Label(parent, text="Name:")
    name_label.grid(row=0, column=0, sticky=NSEW)
    name_label.config(anchor="w")
    name_value = Label(parent, text=data_pack.get_name())
    name_value.grid(row=0, column=1, sticky=NSEW)
    name_value.config(anchor="w")

    business_name_label = Label(parent, text="Business Name:")
    business_name_label.grid(row=1, column=0, sticky=NSEW)
    business_name_label.config(anchor="w")
    business_name_value = Label(parent, text=data_pack.get_business_name())
    business_name_value.grid(row=1, column=1, sticky=NSEW)
    business_name_value.config(anchor="w")

    description_label = Label(parent, text="Description:")
    description_label.grid(row=2, column=0, sticky=NSEW)
    description_label.config(anchor="w")
    description_value = Label(parent, text=data_pack.get_business_description())
    description_value.grid(row=2, column=1, sticky=NSEW)
    description_value.config(anchor="w")


def build_data_pack_items_view(parent, items):
    for improvement in items:
        build_and_add_business_state_modifier_view(parent, improvement)


def build_status_view(parent, business):
    # Core properties
    business_properties = LabelFrame(parent, text="Business Properties")
    for key, value in business.get_properties().items():
        build_property_view_gui(business_properties, key, value)
    business_properties.pack(expand=1, fill="x")

    # Improvements
    applied_improvements = LabelFrame(parent, text="Business Improvements")
    for item in business.get_improvements():
        build_active_view(applied_improvements, item)
    applied_improvements.pack(expand=1, fill="x")

    # Active Contracts
    active_contracts = LabelFrame(parent, text="Active Contracts")
    for item in business.get_contracts():
        build_active_view(active_contracts, item)
    active_contracts.pack(expand=1, fill="x")

    # Employees
    active_employees = LabelFrame(parent, text="Active Employees")
    for item in business.get_employees():
        build_active_view(active_employees, item)
    active_employees.pack(expand=1, fill="x")

    # Sales
    sales = LabelFrame(parent, text="Sales")
    for item in business.get_most_recent_sales_history():
        build_sales_view(sales, item)
    sales.pack(expand=1, fill="x")

    # Customers
    customers = LabelFrame(parent, text="Customers")
    for item in business.get_most_recent_customer_history():
        build_customers_view(customers, item)
    customers.pack(expand=1, fill="x")


def build_purchaseable_view(callback_handler, parent, business):
    # Improveable
    improveable = LabelFrame(parent, text="Purchaseable Improvements")
    for item in business.get_improveable():
        build_improvement_view(improveable, item, interaction=True, purchase_handler=callback_handler)
    improveable.pack(expand=1, fill="x")

    # Contracts
    contractable = LabelFrame(parent, text="Purchaseable Contracts")
    for item in business.get_contractable():
        build_contract_view(contractable, item, interaction=True, purchase_handler=callback_handler)
    contractable.pack(expand=1, fill="x")

    # Staff
    hireable = LabelFrame(parent, text="Hireable Employee Types")
    for item in business.get_hireable():
        build_employee_view(hireable, item, interaction=True, purchase_handler=callback_handler)
    hireable.pack(expand=1, fill="x")
